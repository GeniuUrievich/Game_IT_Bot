from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from SRC.DataBase.Function_Programming_language import get_all_language
from SRC.DataBase.Function_Task import check_answer
from SRC.DataBase.Function_User_DataBase import add_user, issue_task, get_user, true_answer_task, false_answer_task

# Bot setup
bot = Bot("7734808592:AAErqvH9MkIMS8u0h7oK8GwIkEsDh0SMeqg")
dp = Dispatcher(storage=MemoryStorage())

# Keyboards
start_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="start_tasks")]
    ]
)

language_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="Python", callback_data="lang_python")],
        [InlineKeyboardButton(text="JavaScript", callback_data="lang_js")],
        [InlineKeyboardButton(text="C#", callback_data="lang_csharp")]
    ]
)

level_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫", callback_data="level1")],
        [InlineKeyboardButton(text="–£—á–µ–Ω–∏–∫", callback_data="level2")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level3")],
        [InlineKeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data="level4")],
        [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä", callback_data="level5")]
    ]
)

answer_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="answer1")],
        [InlineKeyboardButton(text="2", callback_data="answer2")],
        [InlineKeyboardButton(text="3", callback_data="answer3")],
        [InlineKeyboardButton(text="4", callback_data="answer4")]]
)

after_task_true_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="after1")],
        [InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="after2")]
    ]
)
after_task_false_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="after1")],
        [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data="after3")],
        [InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="after2")],
    ]
)


# FSM states
class Form(StatesGroup):
    waiting_for_language = State()
    waiting_for_level = State()

# Handlers
@dp.message(Command("start"))
async def cmd_start(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    try:
        await add_user(telegram_id, username)
    except:
        pass
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üëã\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=start_kb
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∏ –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n"
        "/help ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "/achievements ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."
    )

@dp.callback_query()
async def handle_callbacks(callback: CallbackQuery, state: FSMContext):
    if callback.data == "start_tasks":
        await callback.message.answer(
            "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
            reply_markup=language_kb
        )
        await callback.answer()
        await state.set_state(Form.waiting_for_language)

    elif callback.data == "lang_python":
        await state.update_data(language="Python")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Python. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å.",
                                      reply_markup=level_kb)
        await callback.answer()

    elif callback.data == "lang_js":
        await state.update_data(language="JavaScript")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ JavaScript. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å.",reply_markup=level_kb)
        await callback.answer()

    elif callback.data == "lang_csharp":
        await state.update_data(language="C#")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ C#. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å.", reply_markup=level_kb)
        await callback.answer()
    elif callback.data == "level1":
        await state.update_data(level="–ù–æ–≤–∏—á–æ–∫")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–æ–≤–∏—á–æ–∫', –≤–æ—Ç –∑–∞–¥–∞—á–∞")
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id,language,level),reply_markup=answer_kb)
        await callback.answer()
    elif callback.data == "level2":
        await state.update_data(level="–£—á–µ–Ω–∏–∫")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–£—á–µ–Ω–∏–∫', –≤–æ—Ç –∑–∞–¥–∞—á–∞")
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id, language, level),reply_markup=answer_kb)
        await callback.answer()
    elif callback.data == "level3":
        await state.update_data(level="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', –≤–æ—Ç –∑–∞–¥–∞—á–∞")
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id, language, level),reply_markup=answer_kb)
        await callback.answer()
    elif callback.data == "level4":
        await state.update_data(level="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', –≤–æ—Ç –∑–∞–¥–∞—á–∞")
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id, language, level),reply_markup=answer_kb)
        await callback.answer()
    elif callback.data == "level5":
        await state.update_data(level="–ú–∞—Å—Ç–µ—Ä")
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ú–∞—Å—Ç–µ—Ä', –≤–æ—Ç –∑–∞–¥–∞—á–∞")
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id, language, level),reply_markup=answer_kb)
        await callback.answer()
    elif callback.data == "answer1":
        user = await get_user(callback.from_user.id)
        task_id = user.task_id
        if await check_answer(task_id, "1"):
            await true_answer_task(callback.from_user.id)
            await callback.message.answer("–í–µ—Ä–Ω–æ",reply_markup=after_task_true_kb)
            await callback.answer()
        else:
            await false_answer_task(callback.from_user.id)
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–æ",reply_markup=after_task_false_kb)
            await callback.answer()
    elif callback.data == "answer2":
        user = await get_user(callback.from_user.id)
        task_id = user.task_id
        print(task_id)
        if await check_answer(task_id, "2"):
            await true_answer_task(callback.from_user.id)
            await callback.message.answer("–í–µ—Ä–Ω–æ",reply_markup=after_task_true_kb)
            await callback.answer()
        else:
            await false_answer_task(callback.from_user.id)
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–æ",reply_markup=after_task_false_kb)
            await callback.answer()
    elif callback.data == "answer3":
        user = await get_user(callback.from_user.id)
        task_id = user.task_id
        print(task_id)
        if await check_answer(task_id, "3"):
            await true_answer_task(callback.from_user.id)
            await callback.message.answer("–í–µ—Ä–Ω–æ",reply_markup=after_task_true_kb)
            await callback.answer()
        else:
            await false_answer_task(callback.from_user.id)
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–æ",reply_markup=after_task_false_kb)
            await callback.answer()
    elif callback.data == "answer4":
        user = await get_user(callback.from_user.id)
        task_id = user.task_id
        print(task_id)
        if await check_answer(task_id, "4"):
            await true_answer_task(callback.from_user.id)
            await callback.message.answer("–í–µ—Ä–Ω–æ", reply_markup=after_task_true_kb)
            await callback.answer()
        else:
            await false_answer_task(callback.from_user.id)
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–æ",reply_markup=after_task_false_kb)
            await callback.answer()
    elif callback.data == "after1":
        data = await state.get_data()
        language = data.get("language")
        level = data.get("level")
        await callback.message.answer(await issue_task(callback.from_user.id, language, level), reply_markup=answer_kb)
    elif callback.data == "after2":
        await callback.message.answer(
            "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
            reply_markup=language_kb
        )
        await callback.answer()
        await state.set_state(Form.waiting_for_language)
        await callback.answer()
    elif callback.data == "after3":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", reply_markup=answer_kb)
        await callback.answer()


async def on_start():

    await dp.start_polling(bot)